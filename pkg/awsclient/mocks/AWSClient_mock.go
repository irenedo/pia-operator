// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package awsclient

import (
	"context"

	"github.com/irenedo/pia-operator/pkg/awsclient"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
)

// NewMockAWSClient creates a new instance of MockAWSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAWSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAWSClient {
	mock := &MockAWSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAWSClient is an autogenerated mock type for the AWSClient type
type MockAWSClient struct {
	mock.Mock
}

type MockAWSClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSClient) EXPECT() *MockAWSClient_Expecter {
	return &MockAWSClient_Expecter{mock: &_m.Mock}
}

// AssociationExists provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) AssociationExists(ctx context.Context, sa *v1.ServiceAccount) (bool, error) {
	ret := _mock.Called(ctx, sa)

	if len(ret) == 0 {
		panic("no return value specified for AssociationExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount) (bool, error)); ok {
		return returnFunc(ctx, sa)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount) bool); ok {
		r0 = returnFunc(ctx, sa)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ServiceAccount) error); ok {
		r1 = returnFunc(ctx, sa)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAWSClient_AssociationExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociationExists'
type MockAWSClient_AssociationExists_Call struct {
	*mock.Call
}

// AssociationExists is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
func (_e *MockAWSClient_Expecter) AssociationExists(ctx interface{}, sa interface{}) *MockAWSClient_AssociationExists_Call {
	return &MockAWSClient_AssociationExists_Call{Call: _e.mock.On("AssociationExists", ctx, sa)}
}

func (_c *MockAWSClient_AssociationExists_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount)) *MockAWSClient_AssociationExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAWSClient_AssociationExists_Call) Return(b bool, err error) *MockAWSClient_AssociationExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockAWSClient_AssociationExists_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount) (bool, error)) *MockAWSClient_AssociationExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePodIdentityAssociation provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) CreatePodIdentityAssociation(ctx context.Context, sa *v1.ServiceAccount, roleArn string, assumeRoleArn string, taggingEnabled bool) (string, error) {
	ret := _mock.Called(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)

	if len(ret) == 0 {
		panic("no return value specified for CreatePodIdentityAssociation")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, string, string, bool) (string, error)); ok {
		return returnFunc(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, string, string, bool) string); ok {
		r0 = returnFunc(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ServiceAccount, string, string, bool) error); ok {
		r1 = returnFunc(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAWSClient_CreatePodIdentityAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePodIdentityAssociation'
type MockAWSClient_CreatePodIdentityAssociation_Call struct {
	*mock.Call
}

// CreatePodIdentityAssociation is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
//   - roleArn string
//   - assumeRoleArn string
//   - taggingEnabled bool
func (_e *MockAWSClient_Expecter) CreatePodIdentityAssociation(ctx interface{}, sa interface{}, roleArn interface{}, assumeRoleArn interface{}, taggingEnabled interface{}) *MockAWSClient_CreatePodIdentityAssociation_Call {
	return &MockAWSClient_CreatePodIdentityAssociation_Call{Call: _e.mock.On("CreatePodIdentityAssociation", ctx, sa, roleArn, assumeRoleArn, taggingEnabled)}
}

func (_c *MockAWSClient_CreatePodIdentityAssociation_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount, roleArn string, assumeRoleArn string, taggingEnabled bool)) *MockAWSClient_CreatePodIdentityAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockAWSClient_CreatePodIdentityAssociation_Call) Return(s string, err error) *MockAWSClient_CreatePodIdentityAssociation_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAWSClient_CreatePodIdentityAssociation_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount, roleArn string, assumeRoleArn string, taggingEnabled bool) (string, error)) *MockAWSClient_CreatePodIdentityAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePodIdentityAssociation provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) DeletePodIdentityAssociation(ctx context.Context, sa *v1.ServiceAccount) error {
	ret := _mock.Called(ctx, sa)

	if len(ret) == 0 {
		panic("no return value specified for DeletePodIdentityAssociation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount) error); ok {
		r0 = returnFunc(ctx, sa)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAWSClient_DeletePodIdentityAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePodIdentityAssociation'
type MockAWSClient_DeletePodIdentityAssociation_Call struct {
	*mock.Call
}

// DeletePodIdentityAssociation is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
func (_e *MockAWSClient_Expecter) DeletePodIdentityAssociation(ctx interface{}, sa interface{}) *MockAWSClient_DeletePodIdentityAssociation_Call {
	return &MockAWSClient_DeletePodIdentityAssociation_Call{Call: _e.mock.On("DeletePodIdentityAssociation", ctx, sa)}
}

func (_c *MockAWSClient_DeletePodIdentityAssociation_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount)) *MockAWSClient_DeletePodIdentityAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAWSClient_DeletePodIdentityAssociation_Call) Return(err error) *MockAWSClient_DeletePodIdentityAssociation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAWSClient_DeletePodIdentityAssociation_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount) error) *MockAWSClient_DeletePodIdentityAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodIdentityAssociation provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) GetPodIdentityAssociation(ctx context.Context, sa *v1.ServiceAccount) (*awsclient.PodIdentityAssociation, error) {
	ret := _mock.Called(ctx, sa)

	if len(ret) == 0 {
		panic("no return value specified for GetPodIdentityAssociation")
	}

	var r0 *awsclient.PodIdentityAssociation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount) (*awsclient.PodIdentityAssociation, error)); ok {
		return returnFunc(ctx, sa)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount) *awsclient.PodIdentityAssociation); ok {
		r0 = returnFunc(ctx, sa)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awsclient.PodIdentityAssociation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ServiceAccount) error); ok {
		r1 = returnFunc(ctx, sa)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAWSClient_GetPodIdentityAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodIdentityAssociation'
type MockAWSClient_GetPodIdentityAssociation_Call struct {
	*mock.Call
}

// GetPodIdentityAssociation is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
func (_e *MockAWSClient_Expecter) GetPodIdentityAssociation(ctx interface{}, sa interface{}) *MockAWSClient_GetPodIdentityAssociation_Call {
	return &MockAWSClient_GetPodIdentityAssociation_Call{Call: _e.mock.On("GetPodIdentityAssociation", ctx, sa)}
}

func (_c *MockAWSClient_GetPodIdentityAssociation_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount)) *MockAWSClient_GetPodIdentityAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAWSClient_GetPodIdentityAssociation_Call) Return(podIdentityAssociation *awsclient.PodIdentityAssociation, err error) *MockAWSClient_GetPodIdentityAssociation_Call {
	_c.Call.Return(podIdentityAssociation, err)
	return _c
}

func (_c *MockAWSClient_GetPodIdentityAssociation_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount) (*awsclient.PodIdentityAssociation, error)) *MockAWSClient_GetPodIdentityAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// ListPodIdentityAssociations provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) ListPodIdentityAssociations(ctx context.Context) ([]*awsclient.PodIdentityAssociation, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPodIdentityAssociations")
	}

	var r0 []*awsclient.PodIdentityAssociation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*awsclient.PodIdentityAssociation, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*awsclient.PodIdentityAssociation); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*awsclient.PodIdentityAssociation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAWSClient_ListPodIdentityAssociations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPodIdentityAssociations'
type MockAWSClient_ListPodIdentityAssociations_Call struct {
	*mock.Call
}

// ListPodIdentityAssociations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAWSClient_Expecter) ListPodIdentityAssociations(ctx interface{}) *MockAWSClient_ListPodIdentityAssociations_Call {
	return &MockAWSClient_ListPodIdentityAssociations_Call{Call: _e.mock.On("ListPodIdentityAssociations", ctx)}
}

func (_c *MockAWSClient_ListPodIdentityAssociations_Call) Run(run func(ctx context.Context)) *MockAWSClient_ListPodIdentityAssociations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAWSClient_ListPodIdentityAssociations_Call) Return(podIdentityAssociations []*awsclient.PodIdentityAssociation, err error) *MockAWSClient_ListPodIdentityAssociations_Call {
	_c.Call.Return(podIdentityAssociations, err)
	return _c
}

func (_c *MockAWSClient_ListPodIdentityAssociations_Call) RunAndReturn(run func(ctx context.Context) ([]*awsclient.PodIdentityAssociation, error)) *MockAWSClient_ListPodIdentityAssociations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePodIdentityAssociation provides a mock function for the type MockAWSClient
func (_mock *MockAWSClient) UpdatePodIdentityAssociation(ctx context.Context, sa *v1.ServiceAccount, roleArn string, assumeRoleArn string, taggingEnabled bool) (string, error) {
	ret := _mock.Called(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePodIdentityAssociation")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, string, string, bool) (string, error)); ok {
		return returnFunc(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, string, string, bool) string); ok {
		r0 = returnFunc(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ServiceAccount, string, string, bool) error); ok {
		r1 = returnFunc(ctx, sa, roleArn, assumeRoleArn, taggingEnabled)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAWSClient_UpdatePodIdentityAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePodIdentityAssociation'
type MockAWSClient_UpdatePodIdentityAssociation_Call struct {
	*mock.Call
}

// UpdatePodIdentityAssociation is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
//   - roleArn string
//   - assumeRoleArn string
//   - taggingEnabled bool
func (_e *MockAWSClient_Expecter) UpdatePodIdentityAssociation(ctx interface{}, sa interface{}, roleArn interface{}, assumeRoleArn interface{}, taggingEnabled interface{}) *MockAWSClient_UpdatePodIdentityAssociation_Call {
	return &MockAWSClient_UpdatePodIdentityAssociation_Call{Call: _e.mock.On("UpdatePodIdentityAssociation", ctx, sa, roleArn, assumeRoleArn, taggingEnabled)}
}

func (_c *MockAWSClient_UpdatePodIdentityAssociation_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount, roleArn string, assumeRoleArn string, taggingEnabled bool)) *MockAWSClient_UpdatePodIdentityAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockAWSClient_UpdatePodIdentityAssociation_Call) Return(s string, err error) *MockAWSClient_UpdatePodIdentityAssociation_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAWSClient_UpdatePodIdentityAssociation_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount, roleArn string, assumeRoleArn string, taggingEnabled bool) (string, error)) *MockAWSClient_UpdatePodIdentityAssociation_Call {
	_c.Call.Return(run)
	return _c
}
