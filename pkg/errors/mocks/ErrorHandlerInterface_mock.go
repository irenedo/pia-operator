// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package errors

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime"
)

// NewMockErrorHandlerInterface creates a new instance of MockErrorHandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorHandlerInterface {
	mock := &MockErrorHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockErrorHandlerInterface is an autogenerated mock type for the ErrorHandlerInterface type
type MockErrorHandlerInterface struct {
	mock.Mock
}

type MockErrorHandlerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorHandlerInterface) EXPECT() *MockErrorHandlerInterface_Expecter {
	return &MockErrorHandlerInterface_Expecter{mock: &_m.Mock}
}

// HandleDeletionError provides a mock function for the type MockErrorHandlerInterface
func (_mock *MockErrorHandlerInterface) HandleDeletionError(ctx context.Context, sa *v1.ServiceAccount, err error, operation string) (controllerruntime.Result, error) {
	ret := _mock.Called(ctx, sa, err, operation)

	if len(ret) == 0 {
		panic("no return value specified for HandleDeletionError")
	}

	var r0 controllerruntime.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, error, string) (controllerruntime.Result, error)); ok {
		return returnFunc(ctx, sa, err, operation)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, error, string) controllerruntime.Result); ok {
		r0 = returnFunc(ctx, sa, err, operation)
	} else {
		r0 = ret.Get(0).(controllerruntime.Result)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ServiceAccount, error, string) error); ok {
		r1 = returnFunc(ctx, sa, err, operation)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockErrorHandlerInterface_HandleDeletionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleDeletionError'
type MockErrorHandlerInterface_HandleDeletionError_Call struct {
	*mock.Call
}

// HandleDeletionError is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
//   - err error
//   - operation string
func (_e *MockErrorHandlerInterface_Expecter) HandleDeletionError(ctx interface{}, sa interface{}, err interface{}, operation interface{}) *MockErrorHandlerInterface_HandleDeletionError_Call {
	return &MockErrorHandlerInterface_HandleDeletionError_Call{Call: _e.mock.On("HandleDeletionError", ctx, sa, err, operation)}
}

func (_c *MockErrorHandlerInterface_HandleDeletionError_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount, err error, operation string)) *MockErrorHandlerInterface_HandleDeletionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockErrorHandlerInterface_HandleDeletionError_Call) Return(v controllerruntime.Result, err1 error) *MockErrorHandlerInterface_HandleDeletionError_Call {
	_c.Call.Return(v, err1)
	return _c
}

func (_c *MockErrorHandlerInterface_HandleDeletionError_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount, err error, operation string) (controllerruntime.Result, error)) *MockErrorHandlerInterface_HandleDeletionError_Call {
	_c.Call.Return(run)
	return _c
}

// HandleError provides a mock function for the type MockErrorHandlerInterface
func (_mock *MockErrorHandlerInterface) HandleError(ctx context.Context, sa *v1.ServiceAccount, err error, operation string) (controllerruntime.Result, error) {
	ret := _mock.Called(ctx, sa, err, operation)

	if len(ret) == 0 {
		panic("no return value specified for HandleError")
	}

	var r0 controllerruntime.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, error, string) (controllerruntime.Result, error)); ok {
		return returnFunc(ctx, sa, err, operation)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount, error, string) controllerruntime.Result); ok {
		r0 = returnFunc(ctx, sa, err, operation)
	} else {
		r0 = ret.Get(0).(controllerruntime.Result)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ServiceAccount, error, string) error); ok {
		r1 = returnFunc(ctx, sa, err, operation)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockErrorHandlerInterface_HandleError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleError'
type MockErrorHandlerInterface_HandleError_Call struct {
	*mock.Call
}

// HandleError is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
//   - err error
//   - operation string
func (_e *MockErrorHandlerInterface_Expecter) HandleError(ctx interface{}, sa interface{}, err interface{}, operation interface{}) *MockErrorHandlerInterface_HandleError_Call {
	return &MockErrorHandlerInterface_HandleError_Call{Call: _e.mock.On("HandleError", ctx, sa, err, operation)}
}

func (_c *MockErrorHandlerInterface_HandleError_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount, err error, operation string)) *MockErrorHandlerInterface_HandleError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockErrorHandlerInterface_HandleError_Call) Return(v controllerruntime.Result, err1 error) *MockErrorHandlerInterface_HandleError_Call {
	_c.Call.Return(v, err1)
	return _c
}

func (_c *MockErrorHandlerInterface_HandleError_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount, err error, operation string) (controllerruntime.Result, error)) *MockErrorHandlerInterface_HandleError_Call {
	_c.Call.Return(run)
	return _c
}

// MarkSuccess provides a mock function for the type MockErrorHandlerInterface
func (_mock *MockErrorHandlerInterface) MarkSuccess(ctx context.Context, sa *v1.ServiceAccount, message string) {
	_mock.Called(ctx, sa, message)
	return
}

// MockErrorHandlerInterface_MarkSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkSuccess'
type MockErrorHandlerInterface_MarkSuccess_Call struct {
	*mock.Call
}

// MarkSuccess is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
//   - message string
func (_e *MockErrorHandlerInterface_Expecter) MarkSuccess(ctx interface{}, sa interface{}, message interface{}) *MockErrorHandlerInterface_MarkSuccess_Call {
	return &MockErrorHandlerInterface_MarkSuccess_Call{Call: _e.mock.On("MarkSuccess", ctx, sa, message)}
}

func (_c *MockErrorHandlerInterface_MarkSuccess_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount, message string)) *MockErrorHandlerInterface_MarkSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockErrorHandlerInterface_MarkSuccess_Call) Return() *MockErrorHandlerInterface_MarkSuccess_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorHandlerInterface_MarkSuccess_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount, message string)) *MockErrorHandlerInterface_MarkSuccess_Call {
	_c.Run(run)
	return _c
}

// ResetRetryCount provides a mock function for the type MockErrorHandlerInterface
func (_mock *MockErrorHandlerInterface) ResetRetryCount(ctx context.Context, sa *v1.ServiceAccount) {
	_mock.Called(ctx, sa)
	return
}

// MockErrorHandlerInterface_ResetRetryCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetRetryCount'
type MockErrorHandlerInterface_ResetRetryCount_Call struct {
	*mock.Call
}

// ResetRetryCount is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
func (_e *MockErrorHandlerInterface_Expecter) ResetRetryCount(ctx interface{}, sa interface{}) *MockErrorHandlerInterface_ResetRetryCount_Call {
	return &MockErrorHandlerInterface_ResetRetryCount_Call{Call: _e.mock.On("ResetRetryCount", ctx, sa)}
}

func (_c *MockErrorHandlerInterface_ResetRetryCount_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount)) *MockErrorHandlerInterface_ResetRetryCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockErrorHandlerInterface_ResetRetryCount_Call) Return() *MockErrorHandlerInterface_ResetRetryCount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorHandlerInterface_ResetRetryCount_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount)) *MockErrorHandlerInterface_ResetRetryCount_Call {
	_c.Run(run)
	return _c
}
