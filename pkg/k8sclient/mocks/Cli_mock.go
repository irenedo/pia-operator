// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package k8sclient

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
)

// NewMockCli creates a new instance of MockCli. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCli(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCli {
	mock := &MockCli{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCli is an autogenerated mock type for the Cli type
type MockCli struct {
	mock.Mock
}

type MockCli_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCli) EXPECT() *MockCli_Expecter {
	return &MockCli_Expecter{mock: &_m.Mock}
}

// GetServiceAccount provides a mock function for the type MockCli
func (_mock *MockCli) GetServiceAccount(ctx context.Context, name string, namespace string) (*v1.ServiceAccount, error) {
	ret := _mock.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccount")
	}

	var r0 *v1.ServiceAccount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*v1.ServiceAccount, error)); ok {
		return returnFunc(ctx, name, namespace)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *v1.ServiceAccount); ok {
		r0 = returnFunc(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ServiceAccount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCli_GetServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccount'
type MockCli_GetServiceAccount_Call struct {
	*mock.Call
}

// GetServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *MockCli_Expecter) GetServiceAccount(ctx interface{}, name interface{}, namespace interface{}) *MockCli_GetServiceAccount_Call {
	return &MockCli_GetServiceAccount_Call{Call: _e.mock.On("GetServiceAccount", ctx, name, namespace)}
}

func (_c *MockCli_GetServiceAccount_Call) Run(run func(ctx context.Context, name string, namespace string)) *MockCli_GetServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCli_GetServiceAccount_Call) Return(serviceAccount *v1.ServiceAccount, err error) *MockCli_GetServiceAccount_Call {
	_c.Call.Return(serviceAccount, err)
	return _c
}

func (_c *MockCli_GetServiceAccount_Call) RunAndReturn(run func(ctx context.Context, name string, namespace string) (*v1.ServiceAccount, error)) *MockCli_GetServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccount provides a mock function for the type MockCli
func (_mock *MockCli) UpdateServiceAccount(ctx context.Context, sa *v1.ServiceAccount) error {
	ret := _mock.Called(ctx, sa)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ServiceAccount) error); ok {
		r0 = returnFunc(ctx, sa)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCli_UpdateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccount'
type MockCli_UpdateServiceAccount_Call struct {
	*mock.Call
}

// UpdateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - sa *v1.ServiceAccount
func (_e *MockCli_Expecter) UpdateServiceAccount(ctx interface{}, sa interface{}) *MockCli_UpdateServiceAccount_Call {
	return &MockCli_UpdateServiceAccount_Call{Call: _e.mock.On("UpdateServiceAccount", ctx, sa)}
}

func (_c *MockCli_UpdateServiceAccount_Call) Run(run func(ctx context.Context, sa *v1.ServiceAccount)) *MockCli_UpdateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ServiceAccount
		if args[1] != nil {
			arg1 = args[1].(*v1.ServiceAccount)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCli_UpdateServiceAccount_Call) Return(err error) *MockCli_UpdateServiceAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCli_UpdateServiceAccount_Call) RunAndReturn(run func(ctx context.Context, sa *v1.ServiceAccount) error) *MockCli_UpdateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}
